package com.springworldgames.jcgmusic;
public enum MidiInstrument {
	NONE(0, 0), DRUM_KIT(0, 0), ACOUSTIC_GRAND_PIANO(0, 0), WIDE_ACOUSTIC_GRAND_PIANO(
			1, 0), DARK_ACOUSTIC_GRAND_PIANO(2, 0), BRIGHT_ACOUSTIC_PIANO(0, 1), WIDE_BRIGHT_ACOUSTIC_PIANO(
			1, 1), ELECTRIC_GRAND_PIANO(0, 2), WIDE_ELECTRIC_GRAND_PIANO(1, 2), HONKY_TONK_PIANO(
			0, 3), WIDE_HONKY_TONK_PIANO(1, 3), // ...
	ELECTRIC_PIANO_1(0, 4), DETUNED_ELECTRIC_PIANO_1(1, 4), ELECTRIC_PIANO_1_VARIATION(
			2, 4), ELECTRIC_PIANO_60S(3, 4), ELECTRIC_PIANO_2(0, 5), DETUNED_ELECTRIC_PIANO_2(
			1, 5), ELECTRIC_PIANO_2_VARIATION(2, 5), ELECTRIC_PIANO_LEGEND(3, 5), ELECTRIC_PIANO_PHASE(
			4, 5), HARPSICHORD(0, 6), COUPLED_HARPSICHORD(1, 6), WIDE_HARPSICHORD(
			2, 6), OPEN_HARPSICHORD(3, 6), CLAVI(0, 7), PULSE_CLAVINET(1, 7), CELESTA(
			0, 8), GLOCKENSPIEL(0, 9), MUSIC_BOX(0, 10), // ...
	VIBRAPHONE(0, 11), WET_VIBRAPHONE(1, 11), MARIMBA(0, 12), WIDE_MARIMBA(1,
			12), XYLOPHONE(0, 13), TUBULAR_BELLS(0, 14), CHURCH_BELL(1, 14), CARILLON(
			2, 14), DULCIMER(0, 15), DRAWBAR_ORGAN(0, 16), DETUNED_ORGAN_1(1,
			16), ORGAN_60S_1(2, 16), ORGAN_4(3, 16), PERCUSSIVE_ORGAN(0, 17), DETUNED_ORGAN_2(
			1, 17), ORGAN_5(2, 17), // ...
	ROCK_ORGAN(0, 18), CHURCH_ORGAN(0, 19), CHURCH_ORGAN_2(1, 19), CHURCH_ORGAN_3(
			2, 19), REED_ORGAN(0, 20), PUFF_ORGAN(1, 20), ACCORDION(0, 21), ITALIAN_ACCORDION(
			1, 21), HARMONICA(0, 22), TANGO_ACCORDION(0, 23), // ...
	ACOUSTIC_NYLON_GUITAR(0, 24), UKULELE(1, 24), OPEN_NYLON_GUITAR(2, 24), NYLON_GUITAR_2(
			3, 24), ACOUSTIC_STEEL_GUITAR(0, 25), STEEL_GUITAR_12_STRINGS(1, 25), MANDOLIN(
			2, 25), STEEL_GUITAR_PLUS_BODY(3, 25), ELECTRIC_JAZZ_GUITAR(0, 26), HAWAIIAN_GUITAR(
			1, 26), ELECTRIC_CLEAN_GUITAR(0, 27), CHORUS_GUITAR(1, 27), MID_TONE_GUITAR(
			2, 27), // ...
	ELECTRIC_MUTED_GUITAR(0, 28), FUNK_GUITAR(1, 28), FUNK_GUITAR_2(2, 28), JAZZ_MAN(
			3, 28), OVERDRIVEN_GUITAR(0, 29), GUITAR_PINCH(1, 29), DISTORTION_GUITAR(
			0, 30), FEEDBACK_GUITAR(1, 30), DISTORTION_RTM_GUITAR(2, 30), GUITAR_HARMONICS(
			0, 31), GUITAR_FEEDBACK(1, 31), ACOUSTIC_BASS(0, 32), // ...
	ELECTRIC_FINGER_BASS(0, 33), FINGER_SLAP(1, 33), ELECTRIC_PICK_BASS(0, 34), FRETLESS_BASS(
			0, 35), SLAP_BASS_1(0, 36), SLAP_BASS_2(0, 37), SYNTH_BASS_1(0, 38), SYNTH_BASS_101(
			1, 38), SYNTH_BASS_3(2, 38), CLAVI_BASS(3, 38), HAMMER(4, 38), // ...
	SYNTH_BASS_2(0, 39), SYNTH_BASS_4(1, 39), RUBBER_BASS(2, 39), ATTACK_PULSE(
			3, 39), VIOLIN(0, 40), SLOW_VIOLIN(1, 40), VIOLA(0, 41), CELLO(0,
			42), CONTRABASS(0, 43), TREMOLO_STRINGS(0, 44), PIZZICATO_STRINGS(
			0, 45), ORCHESTRAL_HARP(0, 46), YANG_QIN(1, 46), // ...
	TIMPANI(0, 47), STRING_ENSEMBLE_1(0, 48), ORCHESTRA_STRINGS(1, 48), STRINGS_60S(
			2, 48), STRING_ENSEMBLE_2(0, 49), SYNTH_STRINGS_1(0, 50), SYNTH_STRINGS_3(
			1, 50), SYNTH_STRINGS_2(0, 51), CHOIR_AAHS(0, 52), CHOIR_AAHS_2(1,
			52), VOICE_OOHS(0, 53), HUMMING(1, 53), // ...
	SYNTH_VOICE(0, 54), ANALOG_VOICE(1, 54), ORCHESTRA_HIT(0, 55), BASS_HIT(1,
			55), HIT_60S(2, 55), EURO_HIT(3, 55), TRUMPET(0, 56), DARK_TRUMPET(
			1, 56), TROMBONE(0, 57), TROMBONE_2(1, 57), BRIGHT_TROMBONE(2, 57), TUBA(
			0, 58), MUTED_TRUMPET(0, 59), MUTED_TRUMPET_2(1, 59), FRENCH_HORN(
			0, 60), FRENCH_HORN_2(1, 60), BRASS_SECTION(0, 61), BRASS_SECTION_2(
			1, 61), // ...
	SYNTH_BRASS_1(0, 62), SYNTH_BRASS_3(1, 62), ANALOG_BRASS_1(2, 62), JUMP_BRASS(
			3, 62), SYNTH_BRASS_2(0, 63), SYNTH_BRASS_4(1, 63), ANALOG_BRASS_2(
			2, 63), SOPRANO_SAX(0, 64), ALTO_SAX(0, 65), TENOR_SAX(0, 66), BARITONE_SAX(
			0, 67), OBOE(0, 68), ENGLISH_HORN(0, 69), // ...
	BASSOON(0, 70), CLARINET(0, 71), PICCOLO(0, 72), FLUTE(0, 73), RECORDER(0,
			74), PAN_FLUTE(0, 75), BLOWN_BOTTLE(0, 76), SHAKUHACHI(0, 77), WHISTLE(
			0, 78), OCARINA(0, 79), // ...
	SQUARE_LEAD(0, 80), SQUARE_WAVE(1, 80), SINE_WAVE(2, 80), SAWTOOTH_LEAD(0,
			81), SAW_WAVE(1, 81), DOCTOR_SOLO(2, 81), NATURAL_LEAD(3, 81), SEQUENCED_SAW(
			4, 81), CALLIOPE_LEAD(0, 82), CHIFF_LEAD(0, 83), CHARANG_LEAD(0, 84), WIRE_LEAD(
			1, 84), VOICE_LEAD(0, 85), FIFTHS_LEAD(0, 86), // ...
	BASS_PLUS_LEAD(0, 87), DELAYED_LEAD(1, 87), NEW_AGE_PAD(0, 88), WARM_PAD(0,
			89), SINE_PAD(1, 89), POLYSYNTH_PAD(0, 90), CHOIR_PAD(0, 91), ITOPIA(
			1, 91), BOWED_PAD(0, 92), METALLIC_PAD(0, 93), HALO_PAD(0, 94), // ...
	SWEEP_PAD(0, 95), RAIN_FX(0, 96), SOUNDTRACK_FX(0, 97), CRYSTAL_FX(0, 98), SYNTH_MALLET(
			1, 98), ATMOSHPERE_FX(0, 99), BRIGHTNESS_FX(0, 100), GOBLINS_FX(0,
			101), ECHOES_FX(0, 102), ECHO_BELL(1, 102), ECHO_PAN(2, 102), // ...
	SCI_FI_FX(0, 103), SITAR(0, 104), SITAR_2(1, 104), BANJO(0, 105), SHAMISEN(
			0, 106), KOTO(0, 107), TAISHO_KOTO(1, 107), KALIMBA(0, 108), BAG_PIPE(
			0, 109), FIDDLE(0, 110), SHANAI(0, 111), TINKLE_BELL(0, 112), AGOGO(
			0, 113), // ...
	STEEL_DRUMS(0, 114), WOODBLOCK(0, 115), CASTANETS(1, 116), TAIKO_DRUM(0,
			116), CONCERT_BASS_DRUM(1, 116), MELODIC_TOM(0, 117), MELODIC_TOM_2(
			1, 117), SYNTH_DRUM(0, 118), TOM_808(1, 118), ELECTRIC_PERCUSSION(
			2, 118), REVERSE_CYMBAL(0, 119), GUITAR_FRET_NOISE(0, 120), GUITAR_CUT_NOISE(
			1, 120), STRING_SLAP(2, 120), // ...
	BREATH_NOISE(0, 121), FLUTE_KEY_CLICK(1, 121), SEASHORE(0, 122), RAIN(1,
			122), THUNDER(2, 122), WIND(3, 122), STREAM(4, 122), BUBBLE(5, 122), BIRD_TWEET(
			0, 123), DOG(1, 123), HORSE_GALLOP(2, 123), BIRD_2(3, 123), TELEPHONE_RING(
			0, 124), TELEPHONE_RING_2(1, 124), DOOR_CREAKING(2, 124), DOOR_CLOSING(
			3, 124), SCRATCH(4, 124), WIND_CHIMES(5, 124), HELICOPTER(0, 125), CAR_ENGINE(
			1, 125), CAR_STOP(2, 125), CAR_PASS(3, 125), CAR_CRASH(4, 125), SIREN(
			5, 125), TRAIN(6, 125), JETPLANE(7, 125), STARSHIP(8, 125), BURST_NOISE(
			9, 125), APPLAUSE(0, 126), LAUGHING(1, 126), SCREAMING(2, 126), PUNCH(
			3, 126), HEART_BEAT(4, 126), FOOTSTEPS(5, 126), GUNSHOT(0, 127), MACHINE_GUN(
			1, 127), LASERGUN(2, 127), EXPLOSION(3, 127);

	private int patch;
	private int bank;

	private MidiInstrument(int bank, int patch) {
		this.patch = patch;
		this.bank = bank;
	}

	public int[] getPitchRange() {
		switch (this) {
		case ACOUSTIC_GRAND_PIANO:
		case BRIGHT_ACOUSTIC_PIANO:
		case ELECTRIC_GRAND_PIANO:
		case HONKY_TONK_PIANO:
		case ELECTRIC_PIANO_1:
		case ELECTRIC_PIANO_2:
			return new int[] { 21, 108 };
		case XYLOPHONE:
			return new int[] { MusicInfo.C4, MusicInfo.C8 };
		case TIMPANI:
			return new int[] { MusicInfo.C2, MusicInfo.C4 };
		case TRUMPET:
			return new int[] { MusicInfo.C3, MusicInfo.C7 };
		case RECORDER:
			return new int[] { MusicInfo.C3, MusicInfo.C8 };
		case SLAP_BASS_1:
		case SLAP_BASS_2:
			return new int[] { MusicInfo.C1, MusicInfo.C4 };
		case VIOLIN:
			return new int[] { MusicInfo.C3, MusicInfo.C8 };
		case ACOUSTIC_STEEL_GUITAR:
		case ACOUSTIC_NYLON_GUITAR:
		case ELECTRIC_JAZZ_GUITAR:
		case ELECTRIC_CLEAN_GUITAR:
		case ELECTRIC_MUTED_GUITAR:
		case OVERDRIVEN_GUITAR:
		case DISTORTION_GUITAR:
			return new int[] { MusicInfo.C2, MusicInfo.C6 };
		case ACCORDION:
			return new int[] { MusicInfo.C3, MusicInfo.C7 };
		}
		return new int[] { 21, 108 };
	}

	public boolean okPitches(int... notes) {
		int[] pitchRange = getPitchRange();
		for (int n : notes) {
			if (n < pitchRange[0] || n > pitchRange[1]) {
				return false;
			}
		}
		return true;
	}

	public int getPatch() {
		return patch;
	}

	public int getBank() {
		return bank;
	}
	
}
